services:
  proxy:
    image: nginx
    container_name: proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      - dev
    depends_on:
      - app
      - weather_forecast_api

  app:
    restart: always
    image: ubuntu:22.04
    build:
      context: .
    environment:
      - PGUSER=${POSTGRES_USER_NAME}
      - PGPASSWORD=${POSTGRES_USER_PASSWORD}
      - PGDATABASE=${POSTGRES_USER_DATABASE_NAME}
      - PGPORT=5432
      - PGHOST=postgres
    env_file:
      - .env
    ports:
      - "0.0.0.0:7777:7777"
    depends_on:
      - postgres
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost || exit 1
      interval: 5m
      timeout: 3s
      retries: 3
      start_period: 2m
    networks:
      - dev


  postgres:
    restart: always
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PROJECT_USER_NAME: ${POSTGRES_USER_NAME}
      PROJECT_USER_PASSWORD: ${POSTGRES_USER_PASSWORD}
      PROJECT_USER_DATABASE_NAME: ${POSTGRES_USER_DATABASE_NAME}
    ports:
      - "0.0.0.0:5433:5432"
    volumes:
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - dev

  weather_forecast_db:
    image: postgres:latest
    container_name: weather_forecast_db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=weather_forecast_db
    ports:
      - 5432:5432
    volumes:
      - weather_forecast_data:/var/lib/postgresql/data
      - ./weather/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dev

  weather_forecast_api:
    container_name: weather_forecast_api
    build: ./weather/api
    restart: always
    ports:
      - 6000:6000
    depends_on:
      - weather_forecast_db 
    networks:
      - dev

  weather_forecast_db_admin:
    image: adminer
    container_name: weather_forecast_db_admin
    restart: always
    ports:
      - 8081:8080
    depends_on:
      - weather_forecast_db 
    networks:
      - dev

volumes:
  weather_forecast_data:
    driver: local

networks:
  dev: